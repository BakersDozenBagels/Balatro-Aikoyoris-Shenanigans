[manifest]
version = "1.2"
dump_lua = true
priority = 0


[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = """    local card_aligned = 'bm'"""
position = "at"
payload = """    local card_aligned = 'bm'
    if extra and extra.card_align then card_aligned = extra.card_align end
    local card_trigger_before = false
    if extra and extra.card_trigger_before then card_trigger_before = extra.card_trigger_before end
    local card_trigger = 'before'
    if extra and extra.card_trigger then card_trigger = extra.card_trigger end
"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = """            G.E_MANAGER:add_event(Event({ --Add bonus chips from this card
                    trigger = 'before',
                    delay = delay,
                    func = function()
                    if extrafunc then extrafunc() end
                    attention_text({
                        text = text,
                        scale = config.scale or 1, 
                        hold = delay - 0.2,
                        backdrop_colour = colour,
                        align = card_aligned,
                        major = card,
                        offset = {x = 0, y = y_off}
                    })
                    play_sound(sound, 0.8+percent*0.2, volume)
                    if not extra or not extra.no_juice then
                        card:juice_up(0.6, 0.1)
                        G.ROOM.jiggle = G.ROOM.jiggle + 0.7
                    end
                    return true
                    end
            }))"""
position = "at"
payload = """            G.E_MANAGER:add_event(Event({ --Add bonus chips from this card
                    trigger = card_trigger,
                    delay = delay,
                    func = function()
                    if extrafunc then extrafunc() end
                    attention_text({
                        text = text,
                        scale = config.scale or 1, 
                        hold = delay - 0.2,
                        backdrop_colour = colour,
                        align = card_aligned,
                        major = card,
                        offset = {x = 0, y = y_off}
                    })
                    play_sound(sound, 0.8+percent*0.2, volume)
                    if not extra or not extra.no_juice then
                        card:juice_up(0.6, 0.1)
                        G.ROOM.jiggle = G.ROOM.jiggle + 0.7
                    end
                    return true
                    end
            }), 'base', card_trigger_before)"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = """    self.config.highlighted_limit = config.highlight_limit or 5"""
position = "at"
payload = """    self.config.highlighted_limit = config.highlight_limit or G.GAME.aiko_cards_playable or 5"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = """    if #G.hand.highlighted <= 0 or G.GAME.blind.block_play or #G.hand.highlighted > 5 then """
position = "at"
payload = """    if #G.hand.highlighted <= 0 or G.GAME.blind.block_play or #G.hand.highlighted > G.GAME.aiko_cards_playable then"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = """    enhanced = G.C.SECONDARY_SET.Enhanced"""
position = "after"
payload = """,
    playable = G.C.PLAYABLE"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """                if self.greyed then"""
position = "before"
payload = """                aikoyori_draw_extras(self, layer)"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "    boot_timer('prep stage', 'splash prep',1)"
position = "before"
payload = """    aiko_mod_startup(self)"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "      ease_value(card.T, 'scale',v[2] and 0.25 or -0.15,nil,'REAL',true,0.2)"
position = "after"
payload = """
if v[3] then card.ability.aikoyori_letters_stickers = v[3] else card.ability.aikoyori_letters_stickers = nil end
"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "        for k, v in ipairs(card_protos) do"
position = "before"
payload = """
card_protos = customDeckHooks(self,card_protos)

"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "                    self.children.front:draw_shader('dissolve')"
position = "before"
payload = """
if not self.is_null then
"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "                    self.children.front:draw_shader('dissolve')"
position = "after"
payload = """
end
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "                    self.children.front:draw_shader('negative', nil, self.ARGS.send_to_shader)"
position = "before"
payload = """
if not self.is_null then
"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "            --Draw the main part of the card"
position = "after"
payload = """
        if self.is_null then
            self.children.front = nil
        end
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "                    self.children.front:draw_shader('negative', nil, self.ARGS.send_to_shader)"
position = "after"
payload = """
end
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "                        self.children.front:draw_shader('played', nil, self.ARGS.send_to_shader)"
position = "before"
payload = """
if not self.is_null then
"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "                        self.children.front:draw_shader('played', nil, self.ARGS.send_to_shader)"
position = "after"
payload = """
end
"""
overwrite = true
match_indent = true



[[patches]]
[patches.regex]
target = "card.lua"
pattern = """(?<indent>[\t ]*)(?<render>self.children.front:draw_shader\\('\\w+', nil, self.ARGS.send_to_shader\\))"""
position = "at"
line_prepend = '$indent'
payload = """
if not (self.is_null) then 
    --print("WTF")
    $render
end
"""

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = """                            game_over = false
            end"""
position = "after"
payload = """
            if G.GAME.current_round.advanced_blind then
                if G.GAME.aiko_puzzle_win then
                    game_over = false
                else
                    game_over = true
                end
            end
"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "game.lua"
pattern = """
        if G.GAME.chips - G.GAME.blind.chips >= 0 or G.GAME.current_round.hands_left < 1 then
            G.STATE = G.STATES.NEW_ROUND
        else
            G.STATE = G.STATES.DRAW_TO_HAND
        end
"""
position = "before"
payload = """
            if not G.GAME.current_round.advanced_blind then
"""
overwrite = true
match_indent = true
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = """
        if G.GAME.chips - G.GAME.blind.chips >= 0 or G.GAME.current_round.hands_left < 1 then
            G.STATE = G.STATES.NEW_ROUND
        else
            G.STATE = G.STATES.DRAW_TO_HAND
        end
"""
position = "after"
payload = """
            else
                if G.GAME.aiko_puzzle_win or G.GAME.current_round.hands_left < 1 then
                    G.STATE = G.STATES.NEW_ROUND
                else
                    G.STATE = G.STATES.DRAW_TO_HAND
                end
            end
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = """                    table.insert(left_text,                  
                    config.saved and 
                    {n=G.UIT.C, config={padding = 0.05, align = 'cm'}, nodes={
                        {n=G.UIT.R, config={align = 'cm'}, nodes={
                            {n=G.UIT.O, config={object = DynaText({string = {' '..localize('ph_mr_bones')..' '}, colours = {G.C.FILTER}, shadow = true, pop_in = 0, scale = 0.5*scale, silent = true})}}
                        }}
                    }}
                    or {n=G.UIT.C, config={padding = 0.05, align = 'cm'}, nodes={
                        {n=G.UIT.R, config={align = 'cm'}, nodes={
                            {n=G.UIT.O, config={object = DynaText({string = {' '..localize('ph_score_at_least')..' '}, colours = {G.C.UI.TEXT_LIGHT}, shadow = true, pop_in = 0, scale = 0.4*scale, silent = true})}}
                        }},
                        {n=G.UIT.R, config={align = 'cm', minh = 0.8}, nodes={
                            {n=G.UIT.O, config={w=0.5,h=0.5 , object = stake_sprite, hover = true, can_collide = false}},
                            {n=G.UIT.T, config={text = G.GAME.blind.chip_text, scale = scale_number(G.GAME.blind.chips, scale, 100000), colour = G.C.RED, shadow = true}}
                        }}
                    }}) 
"""
position = "before"
payload = """
            if G.GAME.aiko_puzzle_win then
                table.insert(left_text,
                {n=G.UIT.C, config={padding = 0.05, align = 'cm', minw = 4}, nodes={
                    {n=G.UIT.R, config={align = 'cm'}, nodes={
                        {n=G.UIT.O, config={object = DynaText({string = {' '..localize('ph_puzzle_clear')..' '}, colours = {G.C.FILTER}, shadow = true, pop_in = 0, scale = 0.5*scale, silent = true})}}
                    }}
                }}) 
            else
"""
overwrite = true
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = """                    table.insert(left_text,                  
                    config.saved and 
                    {n=G.UIT.C, config={padding = 0.05, align = 'cm'}, nodes={
                        {n=G.UIT.R, config={align = 'cm'}, nodes={
                            {n=G.UIT.O, config={object = DynaText({string = {' '..localize('ph_mr_bones')..' '}, colours = {G.C.FILTER}, shadow = true, pop_in = 0, scale = 0.5*scale, silent = true})}}
                        }}
                    }}
                    or {n=G.UIT.C, config={padding = 0.05, align = 'cm'}, nodes={
                        {n=G.UIT.R, config={align = 'cm'}, nodes={
                            {n=G.UIT.O, config={object = DynaText({string = {' '..localize('ph_score_at_least')..' '}, colours = {G.C.UI.TEXT_LIGHT}, shadow = true, pop_in = 0, scale = 0.4*scale, silent = true})}}
                        }},
                        {n=G.UIT.R, config={align = 'cm', minh = 0.8}, nodes={
                            {n=G.UIT.O, config={w=0.5,h=0.5 , object = stake_sprite, hover = true, can_collide = false}},
                            {n=G.UIT.T, config={text = G.GAME.blind.chip_text, scale = scale_number(G.GAME.blind.chips, scale, 100000), colour = G.C.RED, shadow = true}}
                        }}
                    }}) 
"""
position = "after"
payload = """
        end
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = """   end

    if main_end then 
        desc_nodes[#desc_nodes+1] = main_end 
    end"""
position = "before"
payload = """    
    elseif _c.set == 'AikoyoriExtraBases' then
        if _c.is_null then
        
            if(G.GAME.letters_mult_enabled) then
                localize{type = 'descriptions', key = _c.key, set = _c.set, full_UI_table.name, vars = loc_vars}
            else
                full_UI_table.name = localize{type = 'name', set = _c.set, key = _c.key, nodes = full_UI_table.name}
            end
            localize{type = 'other', key = 'aiko_x_akyrs_null', nodes = desc_nodes}
        end
        if(G.GAME.letters_mult_enabled) then
            localize{type = 'descriptions', key = _c.key, set = _c.set, nodes = desc_nodes, vars = loc_vars}
        else
            if not _c.is_null then
                localize{type = 'descriptions', key = "letterNotScored", set = _c.set, nodes = desc_nodes, vars = loc_vars}
            else 
                localize{type = 'descriptions', key = "aiko_x_akyrs_null", set = _c.set, nodes = desc_nodes, vars = loc_vars}
            end
        end
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """    return generate_card_ui(self.config.center, nil, loc_vars, card_type, badges, hide_desc, main_start, main_end)"""
position = "before"
payload = """
self.config.center.is_null = self.is_null
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """        loc_vars = { playing_card = not not self.base.colour, value = self.base.value, suit = self.base.suit, colour = self.base.colour,
                    nominal_chips = self.base.nominal > 0 and self.base.nominal or nil,
                    bonus_chips = (self.ability.bonus + (self.ability.perma_bonus or 0)) > 0 and (self.ability.bonus + (self.ability.perma_bonus or 0)) or nil,
                }   """
position = "after"
payload = """
            if self.is_null then
                loc_vars.nominal_chips = nil
            end
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/sprite.lua"
pattern = """         G.SHADERS[_shader or 'dissolve']:send("shadow",(not not _shadow_height))"""
position = "after"
payload = """
    if _send and _send.red then
        G.SHADERS[_shader or 'dissolve']:send("red",(_send.red))
    end
    if _send and _send.green then
        G.SHADERS[_shader or 'dissolve']:send("green",(_send.green))
    end
    if _send and _send.blue then
        G.SHADERS[_shader or 'dissolve']:send("blue",(_send.blue))
    end
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = """        {n=G.UIT.R, config={align = "cm",padding = 0.15}, nodes={"""
position = "at"
payload = """
        {n=G.UIT.R, config={align = "cm",padding = 0.15}, nodes = (G.GAME.current_round.advanced_blind) and SPECIAL_BOSSS_BLIND(G, stake_sprite) or {
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = """            {n=G.UIT.R, config={align = "cm",r = 0.1, padding = 0.05, minw = 3.1, colour = G.C.BLACK, emboss = 0.05}, nodes={"""
position = "at"
payload = """            {n=G.UIT.R, config={align = "cm",r = 0.1, padding = 0.05, minw = 3.1, colour = G.C.BLACK, emboss = 0.05}, nodes= (blind_choice.config.debuff.special_blind) and SPECIAL_BOSSS_BLIND_SELECT(G, stake_sprite, disabled,_reward,blind_choice) or {"""
overwrite = true
match_indent = true
